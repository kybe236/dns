var searchIndex = new Map(JSON.parse('[\
["dns",{"doc":"DNS Client in Development","t":"FFFFOOOOONNNNNNNNNCONNNNNNNNNNOONNNNONNNOOOOOOOOOONNNNNNNNNNNNONNNNGPPPNNNNNNNNNN","n":["Header","Message","Question","Resource","additional","ancount","answer","arcount","authority","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","dns_error","flags","fmt","fmt","fmt","fmt","from","from","from","from","from","get_packet","header","id","into","into","into","into","name","new","new","new","nscount","qclass","qdcount","qname","qtype","question","rclass","rdata","rdlength","rtype","send","set_flags","set_id","set_questions","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","type_id","type_id","type_id","type_id","DnsError","InvalidOpcodeFlag","InvalidRcodeFlag","InvalidZFlag","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id"],"q":[[0,"dns"],[67,"dns::dns_error"],[81,"core::fmt"],[82,"core::fmt"],[83,"core::error"],[84,"alloc::boxed"],[85,"core::result"],[86,"alloc::string"],[87,"core::any"]],"d":["","All communications inside of the domain protocol are …","","The answer, authority, and additional sections all share …","the additional records section contains RRs which relate …","an unsigned 16 bit integer specifying the number of …","The answer section contains RRs that answer the question.","an unsigned 16 bit integer specifying the number of …","the authority section contains RRs that point toward an …","","","","","","","","","","","See the <code>Header::set_flags()</code> method for more information.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","The header section is always present.  The header includes …","A 16 bit identifier assigned by the program that generates …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","a domain name to which this resource record pertains.","Creates a new DnsOption","Creates a new DnsOption","Creates a new Question","an unsigned 16 bit integer specifying the number of name …","a two octet code that specifies the class of the query. …","An unsigned 16 bit integer specifying the number of …","a domain name represented as a sequence of labels, where …","a two octet code which specifies the type of the query. …","The question section contains fields that describe a …","two octets which specify the class of the data in the …","a variable length string of octets that describes the …","an unsigned 16 bit integer that specifies the length in …","two octets containing one of the RR type codes.  This …","","Sets the request flags","Sets the id","Sets the domain name","","","","","","","","","a 32 bit unsigned integer that specifies the time interval …","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,2,1,2,1,2,2,1,5,6,2,1,5,6,1,0,1,2,1,5,6,2,2,1,5,6,2,2,1,2,1,5,6,6,2,1,5,1,5,1,5,5,2,6,6,6,6,2,1,1,2,2,1,5,6,2,1,5,6,6,2,1,5,6,0,16,16,16,16,16,16,16,16,16,16,16,16,16],"f":"`````````{ce{}{}}0000000{{}b}``{{df}h}{{bf}h}{{jf}h}{{lf}h}{cc{}}{{{A`{n}}}d}111{d{{A`{n}}}}``8888`{{}d}8{{}j}``````````{d{{Af{d{Ad{Ab}}}}}}{{bAh}{{Af{Aj{Ad{Ab}}}}}}{{bAh}Aj}{{d{A`{Al}}}Aj}{c{{Af{e}}}{}{}}0000000`{cAn{}}000````{ce{}{}}0{{B`f}h}0<1{cAl{}}443","c":[],"p":[[5,"Header",0],[5,"Message",0],[5,"Formatter",81],[8,"Result",81],[5,"Question",0],[5,"Resource",0],[1,"u8"],[5,"Vec",82],[10,"Error",83],[5,"Box",84],[6,"Result",85],[1,"u16"],[1,"unit"],[5,"String",86],[5,"TypeId",87],[6,"DnsError",67]],"b":[[73,"impl-Display-for-DnsError"],[74,"impl-Debug-for-DnsError"]]}],\
["lib",{"doc":"","t":"FNNHNNNNNNNN","n":["DnsOption","borrow","borrow_mut","dns","fmt","from","into","new","set_flags","try_from","try_into","type_id"],"q":[[0,"lib"],[12,"core::fmt"],[13,"core::fmt"],[14,"core::result"],[15,"core::any"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Set flags","","",""],"i":[0,1,1,0,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[1,3],4],[-1,-1,[]],[-1,-2,[],[]],[5,1],[[1,6],2],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]]],"c":[],"p":[[5,"DnsOption",0],[1,"tuple"],[5,"Formatter",12],[8,"Result",12],[5,"String",13],[1,"u16"],[6,"Result",14],[5,"TypeId",15]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
